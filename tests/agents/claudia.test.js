import { describe, test, expect, vi, beforeEach } from 'vitest';

// Mock Octokit
const mockCreateComment = vi.fn();
const mockOctokit = {
  rest: {
    issues: {
      createComment: mockCreateComment
    }
  }
};

// Mock the @octokit/rest module
vi.mock('@octokit/rest', () => ({
  Octokit: vi.fn(() => mockOctokit)
}));

// Claudia implementation for testing
async function postToGitHub(prNumber, planTasks, owner = 'owner', repo = 'repo') {
  if (!process.env.GITHUB_TOKEN) {
    return {
      error: 'GITHUB_TOKEN environment variable required'
    };
  }

  try {
    const { Octokit } = await import('@octokit/rest');
    const octokit = new Octokit({ 
      auth: process.env.GITHUB_TOKEN 
    });

    const taskList = planTasks.map((task, index) => {
      const files = task.filePaths.map(f => `\`${f}\``).join(', ');
      const deps = task.deps && task.deps.length > 0 ? `\n    - Dependencies: ${task.deps.join(', ')}` : '';
      return `- [ ] **${task.name}** (${task.type})\n  - Files: ${files}${deps}`;
    }).join('\n');

    const markdown = `## ðŸ¤– AI Implementation Plan for PR #${prNumber}

**Generated by Pulser Maya Planning Agent**

### Tasks:
${taskList}

### Execution Order:
Execute tasks in dependency order. Mark completed tasks with [x].

---
*Generated with Pulser AI â€¢ [View Documentation](https://github.com/${owner}/${repo})*`;

    const result = await octokit.rest.issues.createComment({
      owner,
      repo,
      issue_number: prNumber,
      body: markdown
    });

    return {
      commentUrl: result.data.html_url,
      commentId: result.data.id
    };

  } catch (error) {
    return {
      error: `GitHub API error: ${error.message}`
    };
  }
}

describe('Claudia Agent', () => {
  beforeEach(() => {
    vi.clearAllMocks();
    // Reset environment
    delete process.env.GITHUB_TOKEN;
  });

  test('should require GITHUB_TOKEN environment variable', async () => {
    const planTasks = [
      {
        name: 'Create component',
        filePaths: ['src/components/Test.tsx'],
        type: 'code',
        deps: []
      }
    ];

    const result = await postToGitHub(123, planTasks, 'owner', 'repo');
    
    expect(result).toEqual({
      error: 'GITHUB_TOKEN environment variable required'
    });
  });

  test('should format markdown comment correctly', async () => {
    process.env.GITHUB_TOKEN = 'fake-token';
    
    mockCreateComment.mockResolvedValue({
      data: {
        html_url: 'https://github.com/owner/repo/pull/123#issuecomment-456',
        id: 456
      }
    });

    const planTasks = [
      {
        name: 'Create FilterPanel component',
        filePaths: ['src/components/FilterPanel.tsx'],
        type: 'code',
        deps: []
      },
      {
        name: 'Write FilterPanel tests',
        filePaths: ['src/components/__tests__/FilterPanel.test.tsx'],
        type: 'test',
        deps: ['Create FilterPanel component']
      }
    ];

    const result = await postToGitHub(123, planTasks, 'owner', 'repo');
    
    expect(mockCreateComment).toHaveBeenCalledWith({
      owner: 'owner',
      repo: 'repo',
      issue_number: 123,
      body: expect.stringContaining('## ðŸ¤– AI Implementation Plan for PR #123')
    });

    const calledBody = mockCreateComment.mock.calls[0][0].body;
    expect(calledBody).toContain('**Create FilterPanel component** (code)');
    expect(calledBody).toContain('`src/components/FilterPanel.tsx`');
    expect(calledBody).toContain('**Write FilterPanel tests** (test)');
    expect(calledBody).toContain('Dependencies: Create FilterPanel component');
    
    expect(result).toEqual({
      commentUrl: 'https://github.com/owner/repo/pull/123#issuecomment-456',
      commentId: 456
    });
  });

  test('should handle GitHub API errors', async () => {
    process.env.GITHUB_TOKEN = 'fake-token';
    
    mockCreateComment.mockRejectedValue(new Error('API rate limit exceeded'));

    const planTasks = [
      {
        name: 'Create component',
        filePaths: ['src/components/Test.tsx'],
        type: 'code',
        deps: []
      }
    ];

    const result = await postToGitHub(123, planTasks, 'owner', 'repo');
    
    expect(result).toEqual({
      error: 'GitHub API error: API rate limit exceeded'
    });
  });

  test('should handle tasks with multiple file paths', async () => {
    process.env.GITHUB_TOKEN = 'fake-token';
    
    mockCreateComment.mockResolvedValue({
      data: {
        html_url: 'https://github.com/owner/repo/pull/123#issuecomment-456',
        id: 456
      }
    });

    const planTasks = [
      {
        name: 'Update multiple files',
        filePaths: ['src/components/A.tsx', 'src/components/B.tsx', 'src/hooks/useA.ts'],
        type: 'code',
        deps: []
      }
    ];

    await postToGitHub(123, planTasks, 'owner', 'repo');
    
    const calledBody = mockCreateComment.mock.calls[0][0].body;
    expect(calledBody).toContain('`src/components/A.tsx`, `src/components/B.tsx`, `src/hooks/useA.ts`');
  });

  test('should handle tasks with no dependencies', async () => {
    process.env.GITHUB_TOKEN = 'fake-token';
    
    mockCreateComment.mockResolvedValue({
      data: {
        html_url: 'https://github.com/owner/repo/pull/123#issuecomment-456',
        id: 456
      }
    });

    const planTasks = [
      {
        name: 'Independent task',
        filePaths: ['src/components/Independent.tsx'],
        type: 'code',
        deps: []
      }
    ];

    await postToGitHub(123, planTasks, 'owner', 'repo');
    
    const calledBody = mockCreateComment.mock.calls[0][0].body;
    expect(calledBody).not.toContain('Dependencies:');
  });

  test('should include documentation links', async () => {
    process.env.GITHUB_TOKEN = 'fake-token';
    
    mockCreateComment.mockResolvedValue({
      data: {
        html_url: 'https://github.com/owner/repo/pull/123#issuecomment-456',
        id: 456
      }
    });

    const planTasks = [
      {
        name: 'Test task',
        filePaths: ['src/test.tsx'],
        type: 'code',
        deps: []
      }
    ];

    await postToGitHub(123, planTasks, 'testowner', 'testrepo');
    
    const calledBody = mockCreateComment.mock.calls[0][0].body;
    expect(calledBody).toContain('*Generated with Pulser AI â€¢ [View Documentation](https://github.com/testowner/testrepo)*');
  });
});