{
  "summary": {
    "filesScanned": 99,
    "totalIssues": 53,
    "issuesByType": [
      {
        "type": ".includes() without safety check",
        "count": 12
      },
      {
        "type": ".length without safety check",
        "count": 40
      },
      {
        "type": ".forEach() without safety check",
        "count": 1
      }
    ]
  },
  "issues": [
    {
      "file": "src/contexts/EnhancedFilterContext.tsx",
      "line": 219,
      "issue": ".includes() without safety check",
      "code": "return relevantFilters.includes(filterName);",
      "match": "relevantFilters.includes(",
      "fix": null
    },
    {
      "file": "src/utils/safety.ts",
      "line": 112,
      "issue": ".includes() without safety check",
      "code": "if (key.includes('Array') || key.includes('List') || key.includes('Items') ||",
      "match": "key.includes(",
      "fix": null
    },
    {
      "file": "src/utils/safety.ts",
      "line": 112,
      "issue": ".includes() without safety check",
      "code": "if (key.includes('Array') || key.includes('List') || key.includes('Items') ||",
      "match": "key.includes(",
      "fix": null
    },
    {
      "file": "src/utils/safety.ts",
      "line": 112,
      "issue": ".includes() without safety check",
      "code": "if (key.includes('Array') || key.includes('List') || key.includes('Items') ||",
      "match": "key.includes(",
      "fix": null
    },
    {
      "file": "src/utils/error-boundary-sprint.tsx",
      "line": 70,
      "issue": ".includes() without safety check",
      "code": "msg => errorMessage.includes(msg)",
      "match": "errorMessage.includes(",
      "fix": null
    },
    {
      "file": "src/utils/error-boundary-sprint.tsx",
      "line": 96,
      "issue": ".includes() without safety check",
      "code": "if (errorMessage.includes(key)) {",
      "match": "errorMessage.includes(",
      "fix": null
    },
    {
      "file": "src/utils/logger.ts",
      "line": 26,
      "issue": ".length without safety check",
      "code": "if (this.logs.length > this.maxLogs) {",
      "match": "logs.length",
      "fix": null
    },
    {
      "file": "src/integrations/supabase/client.ts",
      "line": 23,
      "issue": ".includes() without safety check",
      "code": "if (SUPABASE_URL.includes('your-supabase-url')) {",
      "match": "SUPABASE_URL.includes(",
      "fix": null
    },
    {
      "file": "src/integrations/supabase/client.ts",
      "line": 26,
      "issue": ".includes() without safety check",
      "code": "if (SUPABASE_PUBLISHABLE_KEY.includes('your-anon-key')) {",
      "match": "SUPABASE_PUBLISHABLE_KEY.includes(",
      "fix": null
    },
    {
      "file": "src/components/ui/chart.tsx",
      "line": 73,
      "issue": ".length without safety check",
      "code": "if (!colorConfig.length) {",
      "match": "colorConfig.length",
      "fix": null
    },
    {
      "file": "src/components/ui/chart.tsx",
      "line": 174,
      "issue": ".length without safety check",
      "code": "const nestLabel = payload.length === 1 && indicator !== \"dot\"",
      "match": "payload.length",
      "fix": null
    },
    {
      "file": "src/components/ui/multi-select.tsx",
      "line": 59,
      "issue": ".includes() without safety check",
      "code": "safeSelected.includes(option.value)",
      "match": "safeSelected.includes(",
      "fix": null
    },
    {
      "file": "src/components/ui/multi-select.tsx",
      "line": 138,
      "issue": ".includes() without safety check",
      "code": "const newSelected = safeSelected.includes(option.value)",
      "match": "safeSelected.includes(",
      "fix": null
    },
    {
      "file": "src/components/ui/multi-select.tsx",
      "line": 148,
      "issue": ".includes() without safety check",
      "code": "safeSelected.includes(option.value) ? \"opacity-100\" : \"opacity-0\"",
      "match": "safeSelected.includes(",
      "fix": null
    },
    {
      "file": "src/components/ui/multi-select.tsx",
      "line": 118,
      "issue": ".length without safety check",
      "code": "disabled={safeSelected.length === options.length}",
      "match": "safeSelected.length",
      "fix": null
    },
    {
      "file": "src/components/ui/multi-select.tsx",
      "line": 118,
      "issue": ".length without safety check",
      "code": "disabled={safeSelected.length === options.length}",
      "match": "options.length",
      "fix": null
    },
    {
      "file": "src/components/ui/multi-select.tsx",
      "line": 127,
      "issue": ".length without safety check",
      "code": "disabled={safeSelected.length === 0}",
      "match": "safeSelected.length",
      "fix": null
    },
    {
      "file": "src/components/layout/Breadcrumbs.tsx",
      "line": 39,
      "issue": ".length without safety check",
      "code": "if (filters.ageGroups && filters.ageGroups.length > 0) {",
      "match": "ageGroups.length",
      "fix": null
    },
    {
      "file": "src/components/layout/Breadcrumbs.tsx",
      "line": 43,
      "issue": ".length without safety check",
      "code": "if (filters.genders && filters.genders.length > 0) {",
      "match": "genders.length",
      "fix": null
    },
    {
      "file": "src/components/layout/Breadcrumbs.tsx",
      "line": 47,
      "issue": ".length without safety check",
      "code": "if (filters.brands && filters.brands.length > 0) {",
      "match": "brands.length",
      "fix": null
    },
    {
      "file": "src/components/layout/Breadcrumbs.tsx",
      "line": 51,
      "issue": ".length without safety check",
      "code": "if (filters.categories && filters.categories.length > 0) {",
      "match": "categories.length",
      "fix": null
    },
    {
      "file": "src/components/layout/Breadcrumbs.tsx",
      "line": 67,
      "issue": ".length without safety check",
      "code": "const hasFilters = filterSummary.length > 0;",
      "match": "filterSummary.length",
      "fix": null
    },
    {
      "file": "src/components/layout/Breadcrumbs.tsx",
      "line": 127,
      "issue": ".length without safety check",
      "code": "{filterSummary.length} filter{filterSummary.length !== 1 ? 's' : ''} applied",
      "match": "filterSummary.length",
      "fix": null
    },
    {
      "file": "src/components/layout/Breadcrumbs.tsx",
      "line": 127,
      "issue": ".length without safety check",
      "code": "{filterSummary.length} filter{filterSummary.length !== 1 ? 's' : ''} applied",
      "match": "filterSummary.length",
      "fix": null
    },
    {
      "file": "src/components/layout/Breadcrumbs.tsx",
      "line": 161,
      "issue": ".length without safety check",
      "code": "const hasFilters = filterSummary.length > 0;",
      "match": "filterSummary.length",
      "fix": null
    },
    {
      "file": "src/components/layout/Breadcrumbs.tsx",
      "line": 181,
      "issue": ".length without safety check",
      "code": "{filterSummary.length}",
      "match": "filterSummary.length",
      "fix": null
    },
    {
      "file": "src/components/layout/Breadcrumbs.tsx",
      "line": 199,
      "issue": ".length without safety check",
      "code": "const hasFilters = filterSummary.length > 0;",
      "match": "filterSummary.length",
      "fix": null
    },
    {
      "file": "src/components/layout/Breadcrumbs.tsx",
      "line": 205,
      "issue": ".length without safety check",
      "code": "filterCount: filterSummary.length",
      "match": "filterSummary.length",
      "fix": null
    },
    {
      "file": "src/components/charts/ProductSubstitutionsChart.tsx",
      "line": 53,
      "issue": ".length without safety check",
      "code": "if (!data.length) {",
      "match": "data.length",
      "fix": null
    },
    {
      "file": "src/components/charts/ProductSubstitutionsChart.tsx",
      "line": 74,
      "issue": ".length without safety check",
      "code": "shortName: item.original_product.length > 20",
      "match": "original_product.length",
      "fix": null
    },
    {
      "file": "src/components/charts/ProductSubstitutionsChart.tsx",
      "line": 80,
      "issue": ".length without safety check",
      "code": "if (active && payload && payload.length) {",
      "match": "payload.length",
      "fix": null
    },
    {
      "file": "src/components/charts/ProductSubstitutionsChart.tsx",
      "line": 169,
      "issue": ".length without safety check",
      "code": "{data.length > 10 && (",
      "match": "data.length",
      "fix": null
    },
    {
      "file": "src/components/charts/ProductSubstitutionsChart.tsx",
      "line": 171,
      "issue": ".length without safety check",
      "code": "Showing top 10 of {data.length} substitutions",
      "match": "data.length",
      "fix": null
    },
    {
      "file": "src/components/charts/SankeyDiagram.tsx",
      "line": 37,
      "issue": ".length without safety check",
      "code": "if (loading || !nodes.length || !links.length || !svgRef.current) return;",
      "match": "nodes.length",
      "fix": null
    },
    {
      "file": "src/components/charts/SankeyDiagram.tsx",
      "line": 37,
      "issue": ".length without safety check",
      "code": "if (loading || !nodes.length || !links.length || !svgRef.current) return;",
      "match": "links.length",
      "fix": null
    },
    {
      "file": "src/components/charts/SankeyDiagram.tsx",
      "line": 134,
      "issue": ".length without safety check",
      "code": "if (!nodes.length || !links.length) {",
      "match": "nodes.length",
      "fix": null
    },
    {
      "file": "src/components/charts/SankeyDiagram.tsx",
      "line": 134,
      "issue": ".length without safety check",
      "code": "if (!nodes.length || !links.length) {",
      "match": "links.length",
      "fix": null
    },
    {
      "file": "src/components/charts/ParetoChart.tsx",
      "line": 58,
      "issue": ".length without safety check",
      "code": "if (!data.length) {",
      "match": "data.length",
      "fix": null
    },
    {
      "file": "src/components/charts/ParetoChart.tsx",
      "line": 74,
      "issue": ".length without safety check",
      "code": "if (active && payload && payload.length) {",
      "match": "payload.length",
      "fix": null
    },
    {
      "file": "src/components/charts/ParetoChart.tsx",
      "line": 99,
      "issue": ".length without safety check",
      "code": "{thresholdIndex + 1} of {data.length} items ({((thresholdIndex + 1) / data.length * 100).toFixed(0)}%)",
      "match": "data.length",
      "fix": null
    },
    {
      "file": "src/components/charts/ParetoChart.tsx",
      "line": 99,
      "issue": ".length without safety check",
      "code": "{thresholdIndex + 1} of {data.length} items ({((thresholdIndex + 1) / data.length * 100).toFixed(0)}%)",
      "match": "data.length",
      "fix": null
    },
    {
      "file": "src/components/DebugPanel.tsx",
      "line": 77,
      "issue": ".includes() without safety check",
      "code": "<p className={debugInfo.supabaseConnection.includes('Error') ? 'text-red-400' : 'text-green-400'}>",
      "match": "supabaseConnection.includes(",
      "fix": null
    },
    {
      "file": "src/components/ProductMixDashboard.tsx",
      "line": 284,
      "issue": ".length without safety check",
      "code": "<Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />",
      "match": "COLORS.length",
      "fix": null
    },
    {
      "file": "src/components/ProductMixDashboard.tsx",
      "line": 325,
      "issue": ".length without safety check",
      "code": "style={{ backgroundColor: COLORS[index % COLORS.length] }}",
      "match": "COLORS.length",
      "fix": null
    },
    {
      "file": "src/components/SprintDashboard.tsx",
      "line": 65,
      "issue": ".length without safety check",
      "code": "{!validationStatus.passed && validationStatus.errors.length > 0 && (",
      "match": "errors.length",
      "fix": null
    },
    {
      "file": "src/components/SprintDashboard.tsx",
      "line": 79,
      "issue": ".length without safety check",
      "code": "{validationStatus.warnings.length > 0 && (",
      "match": "warnings.length",
      "fix": null
    },
    {
      "file": "src/components/SprintDashboard.tsx",
      "line": 93,
      "issue": ".length without safety check",
      "code": "{validationStatus.passed && validationStatus.errors.length === 0 && (",
      "match": "errors.length",
      "fix": null
    },
    {
      "file": "src/hooks/useRetailAnalytics.ts",
      "line": 72,
      "issue": ".length without safety check",
      "code": "if (topBrands.length === 0) {",
      "match": "topBrands.length",
      "fix": null
    },
    {
      "file": "src/hooks/useRetailAnalytics.ts",
      "line": 99,
      "issue": ".length without safety check",
      "code": "const totalTransactions = transactions.length;",
      "match": "transactions.length",
      "fix": null
    },
    {
      "file": "src/pages/Index.tsx",
      "line": 139,
      "issue": ".length without safety check",
      "code": "if (timeSeriesData.length === 0) {",
      "match": "timeSeriesData.length",
      "fix": null
    },
    {
      "file": "src/pages/Index.tsx",
      "line": 434,
      "issue": ".length without safety check",
      "code": ") : data.topBrands.length === 0 ? (",
      "match": "topBrands.length",
      "fix": null
    },
    {
      "file": "src/pages/Index.tsx",
      "line": 455,
      "issue": ".length without safety check",
      "code": "Showing top {data.topBrands.length} brands",
      "match": "topBrands.length",
      "fix": null
    },
    {
      "file": "src/services/productMix.ts",
      "line": 101,
      "issue": ".forEach() without safety check",
      "code": "productsByCategory.forEach((products, category) => {",
      "match": "productsByCategory.forEach(",
      "fix": null
    }
  ]
}