#!/usr/bin/env python3
"""
Automated script to generate and import 2000 transactions to Supabase
This script will:
1. Generate 2000 transactions with proper data
2. Create SQL import files
3. Execute import using Supabase CLI or psql
4. Verify the import was successful
"""

import subprocess
import os
import sys
from generate_2000_transactions import *  # Reuse the generation logic

def check_supabase_cli():
    """Check if Supabase CLI is installed"""
    try:
        result = subprocess.run(['supabase', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("✅ Supabase CLI found:", result.stdout.strip())
            return True
    except FileNotFoundError:
        pass
    print("❌ Supabase CLI not found. Install with: brew install supabase/tap/supabase")
    return False

def check_psql():
    """Check if psql is installed"""
    try:
        result = subprocess.run(['psql', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("✅ psql found:", result.stdout.strip())
            return True
    except FileNotFoundError:
        pass
    print("❌ psql not found. Install PostgreSQL to use psql")
    return False

def get_db_connection_string():
    """Get database connection string from environment or user input"""
    db_url = os.environ.get('SUPABASE_DB_URL')
    if not db_url:
        print("\n⚠️  No SUPABASE_DB_URL environment variable found.")
        print("Get your connection string from: Supabase Dashboard > Settings > Database")
        print("Format: postgresql://postgres:[YOUR-PASSWORD]@db.[PROJECT-REF].supabase.co:5432/postgres")
        db_url = input("\nEnter your Supabase database URL: ").strip()
    return db_url

def create_sql_import_file():
    """Create SQL file that imports the CSV data"""
    sql_content = """
-- Import 2000 transactions to Supabase
-- Auto-generated by auto_import_2000.py

-- Clear existing transaction data
TRUNCATE TABLE transaction_items CASCADE;
TRUNCATE TABLE transactions CASCADE;

-- Create UUID mapping function
CREATE OR REPLACE FUNCTION generate_uuid_for_int(integer_id INTEGER) 
RETURNS UUID AS $$
BEGIN
    -- Generate deterministic UUID from integer
    RETURN uuid_generate_v5(uuid_ns_url(), 'transaction-' || integer_id::text);
END;
$$ LANGUAGE plpgsql;

-- Create product mapping (assuming you have 20 products)
CREATE TEMP TABLE product_map AS
SELECT 
    row_number() OVER (ORDER BY id) as int_id,
    id as uuid_id
FROM products;

-- Import transactions
INSERT INTO transactions (id, created_at, transaction_date, total_amount, items_count)
SELECT 
    gen_random_uuid(),
    created_at::timestamp,
    created_at::date,
    total_amount,
    0  -- Will be updated later
FROM (
    VALUES
"""
    
    # Read transactions CSV and generate INSERT values
    with open('transactions_2000.csv', 'r') as f:
        reader = csv.DictReader(f)
        values = []
        for row in reader:
            values.append(f"    ({row['id']}, '{row['created_at']}', {row['total_amount']})")
        sql_content += ',\n'.join(values)
    
    sql_content += """
) AS t(id, created_at, total_amount);

-- Create transaction mapping
CREATE TEMP TABLE tx_map AS
SELECT 
    row_number() OVER (ORDER BY created_at) as old_id,
    id as new_id
FROM transactions
WHERE created_at >= '2025-01-01';

-- Import transaction items
INSERT INTO transaction_items (transaction_id, product_id, quantity, price, subtotal)
SELECT 
    tm.new_id,
    pm.uuid_id,
    ti.quantity,
    ti.price,
    ti.quantity * ti.price
FROM (
    VALUES
"""
    
    # Read transaction items CSV
    with open('transaction_items_2000.csv', 'r') as f:
        reader = csv.DictReader(f)
        values = []
        for row in reader:
            values.append(f"    ({row['transaction_id']}, {row['product_id']}, {row['quantity']}, {row['price']})")
        sql_content += ',\n'.join(values[:1000])  # First 1000 items
    
    sql_content += """
) AS ti(transaction_id, product_id, quantity, price)
JOIN tx_map tm ON ti.transaction_id = tm.old_id
JOIN product_map pm ON ti.product_id = pm.int_id;

-- Update transaction counts
UPDATE transactions t
SET items_count = (
    SELECT COUNT(*) 
    FROM transaction_items ti 
    WHERE ti.transaction_id = t.id
)
WHERE t.created_at >= '2025-01-01';

-- Verify import
SELECT 
    COUNT(*) as transaction_count,
    SUM(total_amount) as total_revenue,
    MIN(created_at) as first_transaction,
    MAX(created_at) as last_transaction
FROM transactions
WHERE created_at >= '2025-01-01';
"""
    
    with open('import_2000_auto.sql', 'w') as f:
        f.write(sql_content)
    
    print("✅ Created import_2000_auto.sql")

def execute_with_supabase_cli():
    """Execute SQL using Supabase CLI"""
    print("\n🚀 Executing with Supabase CLI...")
    
    # First, check if project is linked
    result = subprocess.run(['supabase', 'status'], capture_output=True, text=True)
    if 'not linked' in result.stdout.lower():
        print("❌ Supabase project not linked. Run: supabase link --project-ref [YOUR-PROJECT-REF]")
        return False
    
    # Execute the SQL file
    result = subprocess.run(
        ['supabase', 'db', 'execute', '-f', 'import_2000_auto.sql'],
        capture_output=True,
        text=True
    )
    
    if result.returncode == 0:
        print("✅ Import successful!")
        print(result.stdout)
        return True
    else:
        print("❌ Import failed:")
        print(result.stderr)
        return False

def execute_with_psql(db_url):
    """Execute SQL using psql"""
    print("\n🚀 Executing with psql...")
    
    result = subprocess.run(
        ['psql', db_url, '-f', 'import_2000_auto.sql'],
        capture_output=True,
        text=True
    )
    
    if result.returncode == 0:
        print("✅ Import successful!")
        # Verify count
        verify_result = subprocess.run(
            ['psql', db_url, '-c', 'SELECT COUNT(*) FROM transactions WHERE created_at >= \'2025-01-01\''],
            capture_output=True,
            text=True
        )
        print(verify_result.stdout)
        return True
    else:
        print("❌ Import failed:")
        print(result.stderr)
        return False

def main():
    """Main execution flow"""
    print("🎯 Auto Import 2000 Transactions to Supabase\n")
    
    # Check if CSV files exist
    if not os.path.exists('transactions_2000.csv'):
        print("❌ transactions_2000.csv not found. Running generator...")
        subprocess.run([sys.executable, 'generate_2000_transactions.py'])
    
    # Create SQL import file
    create_sql_import_file()
    
    # Check available tools
    has_supabase_cli = check_supabase_cli()
    has_psql = check_psql()
    
    if not has_supabase_cli and not has_psql:
        print("\n❌ No database tools found. Please install either:")
        print("   - Supabase CLI: brew install supabase/tap/supabase")
        print("   - PostgreSQL (for psql): brew install postgresql")
        print("\n📋 Alternative: Copy import_2000_auto.sql to Supabase SQL Editor")
        return
    
    # Try Supabase CLI first
    if has_supabase_cli:
        if execute_with_supabase_cli():
            print("\n✅ Successfully imported 2000 transactions!")
            return
    
    # Fall back to psql
    if has_psql:
        db_url = get_db_connection_string()
        if db_url and execute_with_psql(db_url):
            print("\n✅ Successfully imported 2000 transactions!")
            return
    
    print("\n📋 Manual import required:")
    print("1. Go to Supabase Dashboard > SQL Editor")
    print("2. Copy contents of import_2000_auto.sql")
    print("3. Paste and run in SQL Editor")

if __name__ == "__main__":
    main()