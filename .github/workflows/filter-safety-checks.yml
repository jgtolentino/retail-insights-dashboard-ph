name: Filter Safety Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**/*.ts'
      - 'src/**/*.tsx'
      - 'src/**/*.js'
      - 'src/**/*.jsx'

jobs:
  filter-safety-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run Filter Safety Scanner
      run: |
        echo "üîç Running Filter Safety Scanner..."
        node scripts/filter-safety-scanner.js
      continue-on-error: true
      id: safety-scan
      
    - name: Check for Critical Issues
      run: |
        if [ -f "FILTER_SAFETY_SCAN_RESULTS.md" ]; then
          CRITICAL_COUNT=$(grep -c "CRITICAL" FILTER_SAFETY_SCAN_RESULTS.md || echo "0")
          HIGH_COUNT=$(grep -c "HIGH" FILTER_SAFETY_SCAN_RESULTS.md || echo "0")
          
          echo "Critical Issues: $CRITICAL_COUNT"
          echo "High Priority Issues: $HIGH_COUNT"
          
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "‚ùå CRITICAL filter safety issues found!"
            echo "Please fix these before merging:"
            grep -A 3 "CRITICAL" FILTER_SAFETY_SCAN_RESULTS.md || true
            exit 1
          fi
          
          if [ "$HIGH_COUNT" -gt 10 ]; then
            echo "‚ö†Ô∏è Many HIGH priority issues found ($HIGH_COUNT)"
            echo "Consider addressing some before merging"
          fi
        else
          echo "‚ö†Ô∏è Safety scan results not found"
        fi
        
    - name: Upload Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: filter-safety-scan-results
        path: FILTER_SAFETY_SCAN_RESULTS.md
        retention-days: 30

  typescript-strict-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: TypeScript Strict Check
      run: |
        echo "üîç Checking TypeScript strict mode compliance..."
        
        # Check if strict mode is enabled
        if grep -q '"strict": true' tsconfig.json; then
          echo "‚úÖ TypeScript strict mode is enabled"
        else
          echo "‚ö†Ô∏è TypeScript strict mode is not enabled"
          echo "Consider enabling strict mode for better type safety"
        fi
        
        # Run TypeScript compiler with strict checks
        npx tsc --noEmit --strict
        
    - name: ESLint Filter Safety Rules
      run: |
        echo "üîç Running ESLint with filter safety rules..."
        
        # Create temporary ESLint config for filter safety
        cat > .eslintrc.filter-safety.json << 'EOF'
        {
          "extends": ["./.eslintrc.json"],
          "rules": {
            "@typescript-eslint/no-unsafe-member-access": "error",
            "@typescript-eslint/no-unsafe-call": "error",
            "@typescript-eslint/no-unsafe-assignment": "error",
            "@typescript-eslint/no-unsafe-return": "error",
            "no-console": ["error", { "allow": ["warn", "error"] }]
          }
        }
        EOF
        
        # Run ESLint with filter safety rules
        npx eslint src/ --config .eslintrc.filter-safety.json --ext .ts,.tsx

  filter-unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run Filter-Specific Tests
      run: |
        echo "üß™ Running filter-specific unit tests..."
        
        # Run tests for filter-related files
        npm test -- --testPathPattern="filter|Filter" --coverage --coverageReporters=json-summary
        
    - name: Check Filter Test Coverage
      run: |
        echo "üìä Checking filter test coverage..."
        
        if [ -f "coverage/coverage-summary.json" ]; then
          COVERAGE=$(node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json'));
            const total = coverage.total;
            console.log(total.lines.pct);
          ")
          
          echo "Filter test coverage: ${COVERAGE}%"
          
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "‚ö†Ô∏è Filter test coverage is below 80%"
            echo "Please add more tests for filter components"
          else
            echo "‚úÖ Filter test coverage is good"
          fi
        else
          echo "‚ö†Ô∏è Coverage report not found"
        fi

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run Security Audit
      run: |
        echo "üîí Running security audit..."
        npm audit --audit-level moderate
        
    - name: Check for SQL Injection Patterns
      run: |
        echo "üîç Scanning for potential SQL injection patterns..."
        
        # Scan for dangerous SQL patterns
        DANGEROUS_PATTERNS=$(grep -r -n "\${.*}.*\(WHERE\|AND\|OR\|SELECT\)" src/ || echo "")
        
        if [ -n "$DANGEROUS_PATTERNS" ]; then
          echo "‚ö†Ô∏è Potential SQL injection patterns found:"
          echo "$DANGEROUS_PATTERNS"
          echo ""
          echo "Please review these patterns and use parameterized queries"
        else
          echo "‚úÖ No obvious SQL injection patterns found"
        fi

  performance-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build Performance Check
      run: |
        echo "‚ö° Checking build performance..."
        
        start_time=$(date +%s)
        npm run build
        end_time=$(date +%s)
        
        build_time=$((end_time - start_time))
        echo "Build time: ${build_time} seconds"
        
        if [ $build_time -gt 120 ]; then
          echo "‚ö†Ô∏è Build time is longer than expected (>2 minutes)"
        else
          echo "‚úÖ Build time is acceptable"
        fi
        
    - name: Bundle Size Check
      run: |
        echo "üì¶ Checking bundle size..."
        
        if [ -d "dist" ]; then
          BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"
          
          # Get size in MB for comparison
          SIZE_MB=$(du -sm dist/ | cut -f1)
          
          if [ $SIZE_MB -gt 10 ]; then
            echo "‚ö†Ô∏è Bundle size is large (>10MB)"
            echo "Consider code splitting or optimization"
          else
            echo "‚úÖ Bundle size is reasonable"
          fi
        else
          echo "‚ö†Ô∏è Dist directory not found"
        fi