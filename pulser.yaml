name: retail-insights-dashboard
version: 1.0.0

environment:
  required:
    - node
    - npm
    - tailwindcss
    - vercel

agents:
  BasherExec: pulser_agents/basher_exec.yaml
  Caca: pulser_agents/caca.yaml
  MayaPlan: pulser_agents/maya_plan.yaml
  Claudia: pulser_agents/claudia.yaml
  Patcha: pulser_agents/patcha.yaml
  ClaudeDirect: pulser_agents/claude_direct.yaml

tasks:
  qa-filters:
    description: "Run UX/behavioral tests for filter functionality"
    run: |
      echo "üîç Starting Filter UX QA Suite..."
      
      # Run filter-specific E2E tests
      echo "üìã Running E2E Filter Tests..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npx playwright test tests/e2e/filters.spec.ts --reporter=json" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stdout=$(echo "$response" | jq -r '.stdout')
      stderr=$(echo "$response" | jq -r '.stderr')
      
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø E2E Filter tests failed"
        echo "$stderr"
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"qa-filters-e2e", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        echo "‚Üí [Caca] E2E Suggestion: $suggestion"
      else
        echo "‚úÖ E2E Filter tests passed"
      fi
      
      # Run useBrands hook unit tests
      echo "üß™ Running Brand Hook Unit Tests..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npx vitest run tests/unit/hooks/useBrands.test.tsx --reporter=json" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø Brand hook tests failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        echo "$stderr"
      else
        echo "‚úÖ Brand hook tests passed"
      fi
      
      # Run chart-filter integration tests
      echo "üîó Running Chart-Filter Integration Tests..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npx vitest run tests/integration/chart-filter-integration.test.tsx --reporter=json" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø Chart-filter integration tests failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        echo "$stderr"
      else
        echo "‚úÖ Chart-filter integration tests passed"
      fi
      
      # Test brand count validation (must be > 4 to prove dynamic loading)
      echo "üìä Validating Dynamic Brand Loading..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "node -e \"fetch(process.env.VITE_SUPABASE_URL + \"/rest/v1/brands?select=name\", { headers: { apikey: process.env.VITE_SUPABASE_ANON_KEY } }).then(r => r.json()).then(d => { const brands = [...new Set(d.map(b => b.name).filter(Boolean))]; console.log(\"Brand count:\", brands.length); if (brands.length <= 4) { console.error(\"FAIL: Only\", brands.length, \"brands found. Expected > 4 for dynamic loading.\"); process.exit(1); } else { console.log(\"PASS: Found\", brands.length, \"brands - dynamic loading confirmed\"); } }).catch(e => { console.error(\"Database connection failed:\", e.message); process.exit(1); })\"" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stdout=$(echo "$response" | jq -r '.stdout')
      
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø Brand count validation failed"
        echo "$stdout"
      else
        echo "‚úÖ Brand count validation passed"
        echo "$stdout"
      fi
      
      echo "üìã Filter QA Suite Complete"

  qa-finalize:
    description: "Final post-deployment QA - DOM, console errors, screenshot validation"
    run: |
      echo "üîç Starting Post-Deployment Finalization QA..."
      echo "============================================="
      
      # Set deployment URL
      DEPLOYMENT_URL=${DEPLOYMENT_URL:-"https://retail-insights-dashboard-ph.vercel.app"}
      echo "üìç Target URL: $DEPLOYMENT_URL"
      echo ""
      
      # Run comprehensive post-deployment verification
      echo "üß™ Running Post-Deployment Verification..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "DEPLOYMENT_URL=\"'"$DEPLOYMENT_URL"'\" node scripts/postdeploy-verify.js" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stdout=$(echo "$response" | jq -r '.stdout')
      stderr=$(echo "$response" | jq -r '.stderr')
      
      echo "$stdout"
      
      if [ "$exitCode" -ne 0 ]; then
        echo ""
        echo "‚®Ø Post-deployment verification FAILED"
        echo "$stderr"
        
        # Get Caca's analysis of the failure
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"qa-finalize", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        category=$(echo "$cacaResponse" | jq -r '.category')
        severity=$(echo "$cacaResponse" | jq -r '.severity')
        
        echo "‚Üí [Caca] Post-Deploy Analysis: $suggestion ($category/$severity)"
        
        # Auto-reference SOP for environment issues
        if [ "$category" = "environment" ]; then
          echo ""
          echo "üîß [Auto-SOP] Environment issue in production - running fix guide..."
          response=$(pulser invoke --agent BasherExec --function run \
            --args '{ "cmd": "./scripts/auto-fix-environment.sh --detect-env-issue \"'"$stderr"'\"" }')
          autoFixOutput=$(echo "$response" | jq -r '.stdout')
          echo "$autoFixOutput"
        fi
        
        # CRITICAL: Trigger auto-rollback for severe failures
        if [ "$severity" = "critical" ] || [ "$severity" = "high" ]; then
          echo ""
          echo "üö® CRITICAL DEPLOYMENT FAILURE DETECTED"
          echo "Triggering automatic rollback..."
          
          rollbackResponse=$(pulser invoke --agent BasherExec --function run \
            --args '{ "cmd": "./scripts/auto-rollback.sh \"Post-deployment QA failed: '"$suggestion"'\"" }')
          rollbackOutput=$(echo "$rollbackResponse" | jq -r '.stdout')
          rollbackExitCode=$(echo "$rollbackResponse" | jq -r '.exitCode')
          
          echo "$rollbackOutput"
          
          if [ "$rollbackExitCode" -eq 0 ]; then
            echo "‚úÖ Automatic rollback completed successfully"
          else
            echo "‚ùå Automatic rollback failed - manual intervention required"
          fi
        fi
        
        echo ""
        echo "üö® DEPLOYMENT FAILED POST-QA VALIDATION"
        exit 1
      else
        echo ""
        echo "‚úÖ Post-deployment verification PASSED"
        
        # Validate screenshot if available
        if [ -f "e2e-snapshots/postdeploy-verification.png" ]; then
          echo ""
          echo "üì∏ Validating Screenshot..."
          screenshotResponse=$(pulser invoke --agent BasherExec --function run \
            --args '{ "cmd": "node scripts/screenshot-validator.js e2e-snapshots/postdeploy-verification.png" }')
          screenshotExitCode=$(echo "$screenshotResponse" | jq -r '.exitCode')
          screenshotOutput=$(echo "$screenshotResponse" | jq -r '.stdout')
          
          echo "$screenshotOutput"
          
          if [ "$screenshotExitCode" -eq 0 ]; then
            echo "‚úÖ Screenshot validation passed"
          else
            echo "‚ö†Ô∏è Screenshot validation failed (non-critical)"
          fi
        fi
        
        echo ""
        echo "üéâ DEPLOYMENT FINALIZED SUCCESSFULLY"
        echo "‚úÖ All post-deployment checks passed"
        echo "üìç Live URL: $DEPLOYMENT_URL"
      fi

  vercel-env-check:
    description: "Validate Vercel environment variables for production deployment"
    run: |
      echo "üîç Vercel Environment Check..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "./check-vercel-env.sh" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stdout=$(echo "$response" | jq -r '.stdout')
      stderr=$(echo "$response" | jq -r '.stderr')
      
      echo "$stdout"
      
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø Environment variables missing for Vercel deployment"
        echo "$stderr"
        
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"vercel-env-check", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        category=$(echo "$cacaResponse" | jq -r '.category')
        severity=$(echo "$cacaResponse" | jq -r '.severity')
        
        echo "‚Üí [Caca] Environment Fix Suggestion: $suggestion"
        
        # Auto-execute environment fix if it's an environment issue
        if [ "$category" = "environment" ]; then
          echo "üîß [Auto-Fix] Running automated environment fix..."
          response=$(pulser invoke --agent BasherExec --function run \
            --args '{ "cmd": "./scripts/auto-fix-environment.sh --detect-env-issue \"'"$stderr"'\"" }')
          autoFixOutput=$(echo "$response" | jq -r '.stdout')
          echo "$autoFixOutput"
          echo ""
          echo "üìã SOP Reference: sop/environment-credentials-fix.md"
        fi
        
        # This is a deployment blocker
        echo "üö® DEPLOYMENT WILL FAIL - Fix environment variables first"
        exit 1
      else
        echo "‚úÖ Vercel environment validation passed"
      fi

  build-css:
    description: "Compile Tailwind CSS"
    run: |
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npx tailwindcss -i src/index.css -o dist/output.css --minify" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stderr=$(echo "$response" | jq -r '.stderr')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø build-css failed (exit code $exitCode)"
        echo "$stderr"
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"build-css", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        category=$(echo "$cacaResponse" | jq -r '.category')
        severity=$(echo "$cacaResponse" | jq -r '.severity')
        echo "‚Üí [Caca] Suggestion: $suggestion ($category/$severity)"
        
        # Try Patcha auto-fix if severity is not high
        if [ "$severity" != "high" ]; then
          echo "üîß [Patcha] Attempting auto-fix..."
          patchaResponse=$(pulser invoke --agent Patcha --function executeFix \
            --args '{ "suggestion":"'"$suggestion"'", "category":"'"$category"'", "severity":"'"$severity"'", "taskName":"build-css", "context":"'"$stderr"'" }')
          
          executed=$(echo "$patchaResponse" | jq -r '.executed')
          needsManual=$(echo "$patchaResponse" | jq -r '.needsManualIntervention')
          reason=$(echo "$patchaResponse" | jq -r '.reason')
          
          if [ "$executed" = "true" ]; then
            echo "‚úÖ [Patcha] Fix applied: $reason"
            echo "üîÑ Retrying build-css..."
            
            # Retry the original command
            retryResponse=$(pulser invoke --agent BasherExec --function run \
              --args '{ "cmd": "npx tailwindcss -i src/index.css -o dist/output.css --minify" }')
            retryExitCode=$(echo "$retryResponse" | jq -r '.exitCode')
            
            if [ "$retryExitCode" -eq 0 ]; then
              echo "‚úÖ build-css succeeded after auto-fix!"
              echo "$retryResponse" | jq -r '.stdout'
              exit 0
            else
              echo "‚ùå build-css still failing after auto-fix"
              exit $retryExitCode
            fi
          elif [ "$needsManual" = "true" ]; then
            echo "‚ö†Ô∏è [Patcha] Manual intervention required: $reason"
            exit $exitCode
          else
            echo "‚ùå [Patcha] Could not apply fix: $reason"
            exit $exitCode
          fi
        else
          echo "‚ö†Ô∏è [Patcha] High severity error - manual intervention recommended"
          exit $exitCode
        fi
      fi
      echo "$response" | jq -r '.stdout'

  lint:
    description: "Run ESLint"
    run: |
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npx eslint \"src/**/*.{js,jsx,ts,tsx}\"" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stderr=$(echo "$response" | jq -r '.stderr')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø lint failed (exit code $exitCode)"
        echo "$stderr"
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"lint", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        category=$(echo "$cacaResponse" | jq -r '.category')
        severity=$(echo "$cacaResponse" | jq -r '.severity')
        echo "‚Üí [Caca] Suggestion: $suggestion ($category/$severity)"
        
        # Try Patcha auto-fix if severity is not high
        if [ "$severity" != "high" ]; then
          echo "üîß [Patcha] Attempting auto-fix..."
          patchaResponse=$(pulser invoke --agent Patcha --function executeFix \
            --args '{ "suggestion":"'"$suggestion"'", "category":"'"$category"'", "severity":"'"$severity"'", "taskName":"lint", "context":"'"$stderr"'" }')
          
          executed=$(echo "$patchaResponse" | jq -r '.executed')
          needsManual=$(echo "$patchaResponse" | jq -r '.needsManualIntervention')
          reason=$(echo "$patchaResponse" | jq -r '.reason')
          
          if [ "$executed" = "true" ]; then
            echo "‚úÖ [Patcha] Fix applied: $reason"
            echo "üîÑ Retrying lint..."
            
            # Retry the original command
            retryResponse=$(pulser invoke --agent BasherExec --function run \
              --args '{ "cmd": "npx eslint \"src/**/*.{js,jsx,ts,tsx}\"" }')
            retryExitCode=$(echo "$retryResponse" | jq -r '.exitCode')
            
            if [ "$retryExitCode" -eq 0 ]; then
              echo "‚úÖ lint succeeded after auto-fix!"
              echo "$retryResponse" | jq -r '.stdout'
              exit 0
            else
              echo "‚ùå lint still failing after auto-fix"
              exit $retryExitCode
            fi
          elif [ "$needsManual" = "true" ]; then
            echo "‚ö†Ô∏è [Patcha] Manual intervention required: $reason"
            exit $exitCode
          else
            echo "‚ùå [Patcha] Could not apply fix: $reason"
            exit $exitCode
          fi
        else
          echo "‚ö†Ô∏è [Patcha] High severity error - manual intervention recommended"
          exit $exitCode
        fi
      fi
      echo "$response" | jq -r '.stdout'

  test:
    description: "Run Jest tests"
    run: |
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npm test" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stderr=$(echo "$response" | jq -r '.stderr')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø test failed (exit code $exitCode)"
        echo "$stderr"
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"test", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        category=$(echo "$cacaResponse" | jq -r '.category')
        severity=$(echo "$cacaResponse" | jq -r '.severity')
        echo "‚Üí [Caca] Suggestion: $suggestion ($category/$severity)"
        
        # Try Patcha auto-fix if severity is not high
        if [ "$severity" != "high" ]; then
          echo "üîß [Patcha] Attempting auto-fix..."
          patchaResponse=$(pulser invoke --agent Patcha --function executeFix \
            --args '{ "suggestion":"'"$suggestion"'", "category":"'"$category"'", "severity":"'"$severity"'", "taskName":"test", "context":"'"$stderr"'" }')
          
          executed=$(echo "$patchaResponse" | jq -r '.executed')
          needsManual=$(echo "$patchaResponse" | jq -r '.needsManualIntervention')
          reason=$(echo "$patchaResponse" | jq -r '.reason')
          
          if [ "$executed" = "true" ]; then
            echo "‚úÖ [Patcha] Fix applied: $reason"
            echo "üîÑ Retrying test..."
            
            # Retry the original command
            retryResponse=$(pulser invoke --agent BasherExec --function run \
              --args '{ "cmd": "npm test" }')
            retryExitCode=$(echo "$retryResponse" | jq -r '.exitCode')
            
            if [ "$retryExitCode" -eq 0 ]; then
              echo "‚úÖ test succeeded after auto-fix!"
              echo "$retryResponse" | jq -r '.stdout'
              exit 0
            else
              echo "‚ùå test still failing after auto-fix"
              exit $retryExitCode
            fi
          elif [ "$needsManual" = "true" ]; then
            echo "‚ö†Ô∏è [Patcha] Manual intervention required: $reason"
            exit $exitCode
          else
            echo "‚ùå [Patcha] Could not apply fix: $reason"
            exit $exitCode
          fi
        else
          echo "‚ö†Ô∏è [Patcha] High severity error - manual intervention recommended"
          exit $exitCode
        fi
      fi
      echo "$response" | jq -r '.stdout'

  deploy:
    description: "Deploy to Vercel"
    run: |
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "vercel --prod --confirm" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stderr=$(echo "$response" | jq -r '.stderr')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø deploy failed (exit code $exitCode)"
        echo "$stderr"
        suggestion=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"deploy", "stderr":"'"$stderr"'" }' | jq -r '.suggestion')
        echo "‚Üí Suggestion: $suggestion"
        exit $exitCode
      fi
      echo "$response" | jq -r '.stdout'

  plan:
    description: "Generate AI plan for a feature."
    run: |
      result=$(pulser invoke --agent MayaPlan --function planFeature \
        --args '{ "feature":"{{inputFeature}}", "repoPath":"." }')
      echo "$result" | jq .

  post-plan:
    description: "Post AI plan to GitHub PR."
    run: |
      # Expect two inputs: prNumber and the JSON plan from MayaPlan
      pr={{inputPRNumber}}
      planJson='{{inputPlanJson}}'
      response=$(pulser invoke --agent Claudia --function postPlan \
        --args '{ "prNumber":'"$pr"', "planTasks":'"$planJson"' }')
      echo "$response" | jq -r '.commentUrl'

  backend-qa:
    description: "Run comprehensive backend QA tests"
    run: |
      echo "üîç Starting Backend QA Suite..."
      
      # Check environment variables
      if [ -z "$SUPABASE_DB_URL" ]; then
        echo "‚ö†Ô∏è Warning: SUPABASE_DB_URL not set"
      fi
      
      # Run database connection test
      echo "üìä Testing database connection..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "node scripts/test-supabase-connection-simple.js" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚ùå Database connection test failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"backend-qa-db", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        category=$(echo "$cacaResponse" | jq -r '.category')
        
        echo "‚Üí [Caca] $suggestion"
        
        # Auto-reference SOP for environment issues
        if [ "$category" = "environment" ]; then
          echo ""
          echo "üîß [Auto-SOP] Environment issue detected - running automated fix guide..."
          response=$(pulser invoke --agent BasherExec --function run \
            --args '{ "cmd": "./scripts/auto-fix-environment.sh --detect-env-issue \"'"$stderr"'\"" }')
          autoFixOutput=$(echo "$response" | jq -r '.stdout')
          echo "$autoFixOutput"
          echo ""
          echo "üìã SOP Reference: sop/environment-credentials-fix.md"
        fi
      else
        echo "‚úÖ Database connection test passed"
      fi
      
      # Run SQL function tests
      echo "üîß Testing SQL functions..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "node scripts/test-sql-functions.js" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚ùå SQL function tests failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"backend-qa-sql", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        echo "‚Üí [Caca] $(echo "$cacaResponse" | jq -r '.suggestion')"
      else
        echo "‚úÖ SQL function tests passed"
      fi
      
      # Run backend unit tests
      echo "üß™ Running backend unit tests..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npm run test:unit" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚ùå Backend unit tests failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"backend-qa-unit", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        echo "‚Üí [Caca] $(echo "$cacaResponse" | jq -r '.suggestion')"
      else
        echo "‚úÖ Backend unit tests passed"
      fi
      
      # Run integration tests
      echo "üîó Running integration tests..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npm run test:integration" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚ùå Integration tests failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"backend-qa-integration", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        echo "‚Üí [Caca] $(echo "$cacaResponse" | jq -r '.suggestion')"
      else
        echo "‚úÖ Integration tests passed"
      fi
      
      # Run comprehensive filter test
      echo "üîç Running comprehensive filter tests..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "node scripts/comprehensive-filter-test.js" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚ùå Filter tests failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"backend-qa-filters", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        echo "‚Üí [Caca] $(echo "$cacaResponse" | jq -r '.suggestion')"
      else
        echo "‚úÖ Filter tests passed"
      fi
      
      echo "üìä Backend QA Suite Complete!"

  qa:check-orphans:
    description: "Check for orphaned test files that don't correspond to a component."
    run: |
      echo "üß† Running Orphaned Test Detection..."
      npm run qa:check-orphans
    tags: [qa, integrity, test, orphan]
    critical: true

  qa:generate-scaffolds:
    description: "Auto-generate test files for uncovered components using LLM."
    run: |
      echo "ü§ñ Generating test scaffolds with Rabbit..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npm run qa:generate-scaffolds" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stdout=$(echo "$response" | jq -r '.stdout')
      stderr=$(echo "$response" | jq -r '.stderr')
      
      echo "$stdout"
      
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø Test scaffold generation failed"
        echo "$stderr"
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"qa:generate-scaffolds", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        echo "‚Üí [Caca] Suggestion: $suggestion"
        exit 1
      else
        echo "‚úÖ Test scaffolds generated successfully"
      fi
    tags: [qa, scaffold, llm]
    critical: false

  qa:update-matrix:
    description: "Update QA test coverage matrix with current component status"
    run: |
      echo "üìä Updating QA Matrix..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npm run qa:update-matrix" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stdout=$(echo "$response" | jq -r '.stdout')
      stderr=$(echo "$response" | jq -r '.stderr')
      
      echo "$stdout"
      
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø Matrix update failed"
        echo "$stderr"
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"qa:update-matrix", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        echo "‚Üí [Caca] Suggestion: $suggestion"
        exit 1
      else
        echo "‚úÖ QA Matrix updated successfully"
        
        # Analyze coverage and suggest improvements
        matrixContent=$(cat qa-matrix.yaml)
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"qa:coverage-analysis", "matrix":"'"$matrixContent"'", "exitCode":0 }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        echo "‚Üí [Caca] Coverage Analysis: $suggestion"
      fi
    tags: [qa, matrix, coverage]
    critical: false

  ai:diagnostics:
    description: "Run GitHub-Actions AI diagnostic workflow with one-time auto-patch"
    run: |
      echo "ü§ñ Running AI diagnostics and auto-patch cycle..."
      
      # First run diagnostics locally
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "node scripts/ai-diagnostics.js" }')
      diagnosticsExitCode=$(echo "$response" | jq -r '.exitCode')
      
      if [ "$diagnosticsExitCode" -eq 0 ]; then
        echo "‚úÖ AI diagnostics passed - no issues found"
        exit 0
      fi
      
      echo "‚ö†Ô∏è AI diagnostics found issues - attempting auto-fix..."
      
      # Apply auto-fixes
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "node scripts/ai-autofix.js" }')
      fixExitCode=$(echo "$response" | jq -r '.exitCode')
      
      if [ "$fixExitCode" -ne 0 ]; then
        echo "‚ùå Auto-fix failed - manual intervention required"
        exit 1
      fi
      
      echo "üîÑ Re-running diagnostics after auto-fix..."
      
      # Re-run diagnostics to verify fixes
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "node scripts/ai-diagnostics.js" }')
      retryExitCode=$(echo "$response" | jq -r '.exitCode')
      
      if [ "$retryExitCode" -eq 0 ]; then
        echo "‚úÖ AI auto-patch successful - all issues resolved"
        echo "üìù Creating commit with fixes..."
        
        # Commit the fixes
        response=$(pulser invoke --agent BasherExec --function run \
          --args '{ "cmd": "git add -A && git commit -m \"fix: AI automated production-readiness fixes\" || true" }')
        
        exit 0
      else
        echo "‚ùå Issues persist after auto-patch - escalating to human review"
        echo "üìã See ai-diagnostic-report.json for details"
        exit 1
      fi
    tags: [ai, diagnostics]
    critical: true

  claude:analyze:
    description: "Analyze codebase with Claude for issues and improvements"
    run: |
      echo "ü§ñ Running Claude code analysis..."
      
      # Get list of React components to analyze
      componentFiles=$(find src/components -name "*.tsx" -not -path "*/ui/*" | head -10)
      
      response=$(pulser invoke --agent ClaudeDirect --function analyze \
        --args '{ "task":"Analyze React components for performance and best practices", "operation":"analyze", "context":"Retail dashboard components with Zustand and React hooks", "files":'"$(echo "$componentFiles" | jq -R -s 'split("\n")[:-1]')"' }')
      
      result=$(echo "$response" | jq -r '.result')
      suggestions=$(echo "$response" | jq -r '.suggestions[]')
      explanation=$(echo "$response" | jq -r '.explanation')
      
      echo "üìä Analysis Result: $result"
      echo ""
      echo "üí° Suggestions:"
      echo "$suggestions"
      echo ""
      echo "üìù Detailed Explanation:"
      echo "$explanation"
    tags: [analysis, claude, code-quality]
    critical: false

  claude:optimize:
    description: "Get optimization suggestions from Claude for performance improvements"
    run: |
      echo "‚ö° Running Claude optimization analysis..."
      
      # Focus on chart components that might have performance issues
      chartFiles=$(find src/components/charts -name "*.tsx" 2>/dev/null || echo "")
      hookFiles=$(find src/hooks -name "*.ts" -o -name "*.tsx" | head -5)
      
      allFiles="$chartFiles $hookFiles"
      
      response=$(pulser invoke --agent ClaudeDirect --function optimize \
        --args '{ "task":"Identify performance bottlenecks and optimization opportunities", "operation":"optimize", "context":"React dashboard with charts and data visualization", "files":'"$(echo "$allFiles" | tr ' ' '\n' | jq -R -s 'split("\n")[:-1]')"' }')
      
      result=$(echo "$response" | jq -r '.result')
      suggestions=$(echo "$response" | jq -r '.suggestions[]')
      explanation=$(echo "$response" | jq -r '.explanation')
      
      echo "üéØ Optimization Result: $result"
      echo ""
      echo "‚ö° Performance Suggestions:"
      echo "$suggestions"
      echo ""
      echo "üìà Implementation Guide:"
      echo "$explanation"
    tags: [optimization, claude, performance]
    critical: false

  claude:fix:
    description: "Use Claude to fix specific code issues or errors"
    run: |
      echo "üîß Running Claude error fixing..."
      
      # This can be used with specific error context
      errorContext="${ERROR_CONTEXT:-No specific error provided}"
      targetFiles="${TARGET_FILES:-src/components}"
      
      response=$(pulser invoke --agent ClaudeDirect --function fix \
        --args '{ "task":"Fix identified code issues and errors", "operation":"fix", "context":"'"$errorContext"'", "files":["'"$targetFiles"'"] }')
      
      result=$(echo "$response" | jq -r '.result')
      suggestions=$(echo "$response" | jq -r '.suggestions[]')
      code=$(echo "$response" | jq -r '.code')
      explanation=$(echo "$response" | jq -r '.explanation')
      
      echo "üî® Fix Result: $result"
      echo ""
      if [ "$code" != "null" ] && [ -n "$code" ]; then
        echo "üíª Generated Code:"
        echo "$code"
        echo ""
      fi
      echo "üîç Fix Explanation:"
      echo "$explanation"
      echo ""
      echo "‚úÖ Next Steps:"
      echo "$suggestions"
    tags: [fix, claude, debugging]
    critical: false

  claude:review:
    description: "Comprehensive code review with Claude for quality assurance"
    run: |
      echo "üìã Running Claude code review..."
      
      # Review recently modified files
      recentFiles=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(tsx?|jsx?)$' | head -5)
      
      if [ -z "$recentFiles" ]; then
        echo "No recent TypeScript/React files to review"
        exit 0
      fi
      
      response=$(pulser invoke --agent ClaudeDirect --function review \
        --args '{ "task":"Comprehensive code review for quality, bugs, and best practices", "operation":"review", "context":"Recent changes in retail dashboard project", "files":'"$(echo "$recentFiles" | jq -R -s 'split("\n")[:-1]')"' }')
      
      result=$(echo "$response" | jq -r '.result')
      suggestions=$(echo "$response" | jq -r '.suggestions[]')
      explanation=$(echo "$response" | jq -r '.explanation')
      
      echo "üìä Review Result: $result"
      echo ""
      echo "üîç Code Quality Issues Found:"
      echo "$suggestions"
      echo ""
      echo "üìù Detailed Review:"
      echo "$explanation"
      
      # If critical issues found, integrate with Caca for follow-up
      if echo "$result" | grep -i "critical\|error\|bug"; then
        echo ""
        echo "üö® Critical issues detected - getting Caca analysis..."
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"claude:review", "stderr":"'"$result"'", "exitCode":1 }')
        cacaSuggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        echo "‚Üí [Caca] Follow-up: $cacaSuggestion"
      fi
    tags: [review, claude, quality-assurance]
    critical: false

  claude:generate:
    description: "Generate new code components using Claude"
    run: |
      echo "üé® Running Claude code generation..."
      
      # This can be used with specific component requests
      componentType="${COMPONENT_TYPE:-generic component}"
      componentName="${COMPONENT_NAME:-NewComponent}"
      requirements="${REQUIREMENTS:-Basic React component}"
      
      response=$(pulser invoke --agent ClaudeDirect --function generate \
        --args '{ "task":"Generate '"$componentType"' named '"$componentName"'", "operation":"generate", "context":"'"$requirements"' following project patterns", "files":["src/components/", "src/types/", "src/hooks/"] }')
      
      result=$(echo "$response" | jq -r '.result')
      suggestions=$(echo "$response" | jq -r '.suggestions[]')
      code=$(echo "$response" | jq -r '.code')
      explanation=$(echo "$response" | jq -r '.explanation')
      
      echo "üéØ Generation Result: $result"
      echo ""
      if [ "$code" != "null" ] && [ -n "$code" ]; then
        echo "üíª Generated Code:"
        echo "$code"
        echo ""
        
        # Optionally save to file if SAVE_TO_FILE is set
        if [ -n "$SAVE_TO_FILE" ]; then
          echo "$code" > "$SAVE_TO_FILE"
          echo "üíæ Code saved to: $SAVE_TO_FILE"
        fi
      fi
      echo "üìù Implementation Guide:"
      echo "$explanation"
      echo ""
      echo "‚úÖ Next Steps:"
      echo "$suggestions"
    tags: [generate, claude, scaffolding]
    critical: false

composite_tasks:
  ci:
    description: "build ‚Üí lint ‚Üí test"
    steps:
      - build-css
      - lint
      - test
  
  qa-backend:
    description: "Run complete backend QA suite"
    steps:
      - backend-qa
  
  qa-full:
    description: "Run full QA suite with AI diagnostics (frontend + backend + e2e + UX filters + env check + AI)"
    steps:
      - vercel-env-check
      - lint
      - test
      - backend-qa
      - qa-filters
      - qa:check-orphans
      - ai:diagnostics
      - qa-finalize
    tags: [qa, full, test, integrity]
    critical: true
  
  deploy-safe:
    description: "Deploy with comprehensive QA validation, AI diagnostics, and auto-rollback"
    steps:
      - vercel-env-check
      - lint
      - test
      - backend-qa
      - qa-filters
      - ai:diagnostics
      - qa-finalize

  claude-analysis:
    description: "Comprehensive Claude-powered code analysis and optimization"
    steps:
      - claude:analyze
      - claude:optimize
      - claude:review
    tags: [claude, analysis, comprehensive]
    critical: false

  claude-development:
    description: "Full development cycle with Claude assistance"
    steps:
      - claude:generate
      - claude:review
      - claude:optimize
      - lint
      - test
    tags: [claude, development, full-cycle]
    critical: false

  qa-claude-enhanced:
    description: "Enhanced QA with Claude integration for deep code analysis"
    steps:
      - claude:analyze
      - vercel-env-check
      - lint
      - test
      - backend-qa
      - claude:review
      - qa-filters
      - claude:optimize
      - ai:diagnostics
      - qa-finalize
    tags: [qa, claude, enhanced, comprehensive]
    critical: true