name: retail-insights-dashboard
version: 1.0.0

environment:
  required:
    - node
    - npm
    - tailwindcss
    - vercel

agents:
  BasherExec: pulser_agents/basher_exec.yaml
  Caca: pulser_agents/caca.yaml
  MayaPlan: pulser_agents/maya_plan.yaml
  Claudia: pulser_agents/claudia.yaml
  Patcha: pulser_agents/patcha.yaml

tasks:
  qa-filters:
    description: "Run UX/behavioral tests for filter functionality"
    run: |
      echo "üîç Starting Filter UX QA Suite..."
      
      # Run filter-specific E2E tests
      echo "üìã Running E2E Filter Tests..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npx playwright test tests/e2e/filters.spec.ts --reporter=json" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stdout=$(echo "$response" | jq -r '.stdout')
      stderr=$(echo "$response" | jq -r '.stderr')
      
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø E2E Filter tests failed"
        echo "$stderr"
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"qa-filters-e2e", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        echo "‚Üí [Caca] E2E Suggestion: $suggestion"
      else
        echo "‚úÖ E2E Filter tests passed"
      fi
      
      # Run useBrands hook unit tests
      echo "üß™ Running Brand Hook Unit Tests..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npx vitest run tests/unit/hooks/useBrands.test.tsx --reporter=json" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø Brand hook tests failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        echo "$stderr"
      else
        echo "‚úÖ Brand hook tests passed"
      fi
      
      # Run chart-filter integration tests
      echo "üîó Running Chart-Filter Integration Tests..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npx vitest run tests/integration/chart-filter-integration.test.tsx --reporter=json" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø Chart-filter integration tests failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        echo "$stderr"
      else
        echo "‚úÖ Chart-filter integration tests passed"
      fi
      
      # Test brand count validation (must be > 4 to prove dynamic loading)
      echo "üìä Validating Dynamic Brand Loading..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "node -e \"fetch(process.env.VITE_SUPABASE_URL + \"/rest/v1/brands?select=name\", { headers: { apikey: process.env.VITE_SUPABASE_ANON_KEY } }).then(r => r.json()).then(d => { const brands = [...new Set(d.map(b => b.name).filter(Boolean))]; console.log(\"Brand count:\", brands.length); if (brands.length <= 4) { console.error(\"FAIL: Only\", brands.length, \"brands found. Expected > 4 for dynamic loading.\"); process.exit(1); } else { console.log(\"PASS: Found\", brands.length, \"brands - dynamic loading confirmed\"); } }).catch(e => { console.error(\"Database connection failed:\", e.message); process.exit(1); })\"" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stdout=$(echo "$response" | jq -r '.stdout')
      
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø Brand count validation failed"
        echo "$stdout"
      else
        echo "‚úÖ Brand count validation passed"
        echo "$stdout"
      fi
      
      echo "üìã Filter QA Suite Complete"

  vercel-env-check:
    description: "Validate Vercel environment variables for production deployment"
    run: |
      echo "üîç Vercel Environment Check..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "./check-vercel-env.sh" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stdout=$(echo "$response" | jq -r '.stdout')
      stderr=$(echo "$response" | jq -r '.stderr')
      
      echo "$stdout"
      
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø Environment variables missing for Vercel deployment"
        echo "$stderr"
        
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"vercel-env-check", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        category=$(echo "$cacaResponse" | jq -r '.category')
        severity=$(echo "$cacaResponse" | jq -r '.severity')
        
        echo "‚Üí [Caca] Environment Fix Suggestion: $suggestion"
        
        # Auto-execute environment fix if it's an environment issue
        if [ "$category" = "environment" ]; then
          echo "üîß [Auto-Fix] Running automated environment fix..."
          response=$(pulser invoke --agent BasherExec --function run \
            --args '{ "cmd": "./scripts/auto-fix-environment.sh --detect-env-issue \"'"$stderr"'\"" }')
          autoFixOutput=$(echo "$response" | jq -r '.stdout')
          echo "$autoFixOutput"
          echo ""
          echo "üìã SOP Reference: sop/environment-credentials-fix.md"
        fi
        
        # This is a deployment blocker
        echo "üö® DEPLOYMENT WILL FAIL - Fix environment variables first"
        exit 1
      else
        echo "‚úÖ Vercel environment validation passed"
      fi

  build-css:
    description: "Compile Tailwind CSS"
    run: |
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npx tailwindcss -i src/index.css -o dist/output.css --minify" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stderr=$(echo "$response" | jq -r '.stderr')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø build-css failed (exit code $exitCode)"
        echo "$stderr"
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"build-css", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        category=$(echo "$cacaResponse" | jq -r '.category')
        severity=$(echo "$cacaResponse" | jq -r '.severity')
        echo "‚Üí [Caca] Suggestion: $suggestion ($category/$severity)"
        
        # Try Patcha auto-fix if severity is not high
        if [ "$severity" != "high" ]; then
          echo "üîß [Patcha] Attempting auto-fix..."
          patchaResponse=$(pulser invoke --agent Patcha --function executeFix \
            --args '{ "suggestion":"'"$suggestion"'", "category":"'"$category"'", "severity":"'"$severity"'", "taskName":"build-css", "context":"'"$stderr"'" }')
          
          executed=$(echo "$patchaResponse" | jq -r '.executed')
          needsManual=$(echo "$patchaResponse" | jq -r '.needsManualIntervention')
          reason=$(echo "$patchaResponse" | jq -r '.reason')
          
          if [ "$executed" = "true" ]; then
            echo "‚úÖ [Patcha] Fix applied: $reason"
            echo "üîÑ Retrying build-css..."
            
            # Retry the original command
            retryResponse=$(pulser invoke --agent BasherExec --function run \
              --args '{ "cmd": "npx tailwindcss -i src/index.css -o dist/output.css --minify" }')
            retryExitCode=$(echo "$retryResponse" | jq -r '.exitCode')
            
            if [ "$retryExitCode" -eq 0 ]; then
              echo "‚úÖ build-css succeeded after auto-fix!"
              echo "$retryResponse" | jq -r '.stdout'
              exit 0
            else
              echo "‚ùå build-css still failing after auto-fix"
              exit $retryExitCode
            fi
          elif [ "$needsManual" = "true" ]; then
            echo "‚ö†Ô∏è [Patcha] Manual intervention required: $reason"
            exit $exitCode
          else
            echo "‚ùå [Patcha] Could not apply fix: $reason"
            exit $exitCode
          fi
        else
          echo "‚ö†Ô∏è [Patcha] High severity error - manual intervention recommended"
          exit $exitCode
        fi
      fi
      echo "$response" | jq -r '.stdout'

  lint:
    description: "Run ESLint"
    run: |
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npx eslint \"src/**/*.{js,jsx,ts,tsx}\"" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stderr=$(echo "$response" | jq -r '.stderr')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø lint failed (exit code $exitCode)"
        echo "$stderr"
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"lint", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        category=$(echo "$cacaResponse" | jq -r '.category')
        severity=$(echo "$cacaResponse" | jq -r '.severity')
        echo "‚Üí [Caca] Suggestion: $suggestion ($category/$severity)"
        
        # Try Patcha auto-fix if severity is not high
        if [ "$severity" != "high" ]; then
          echo "üîß [Patcha] Attempting auto-fix..."
          patchaResponse=$(pulser invoke --agent Patcha --function executeFix \
            --args '{ "suggestion":"'"$suggestion"'", "category":"'"$category"'", "severity":"'"$severity"'", "taskName":"lint", "context":"'"$stderr"'" }')
          
          executed=$(echo "$patchaResponse" | jq -r '.executed')
          needsManual=$(echo "$patchaResponse" | jq -r '.needsManualIntervention')
          reason=$(echo "$patchaResponse" | jq -r '.reason')
          
          if [ "$executed" = "true" ]; then
            echo "‚úÖ [Patcha] Fix applied: $reason"
            echo "üîÑ Retrying lint..."
            
            # Retry the original command
            retryResponse=$(pulser invoke --agent BasherExec --function run \
              --args '{ "cmd": "npx eslint \"src/**/*.{js,jsx,ts,tsx}\"" }')
            retryExitCode=$(echo "$retryResponse" | jq -r '.exitCode')
            
            if [ "$retryExitCode" -eq 0 ]; then
              echo "‚úÖ lint succeeded after auto-fix!"
              echo "$retryResponse" | jq -r '.stdout'
              exit 0
            else
              echo "‚ùå lint still failing after auto-fix"
              exit $retryExitCode
            fi
          elif [ "$needsManual" = "true" ]; then
            echo "‚ö†Ô∏è [Patcha] Manual intervention required: $reason"
            exit $exitCode
          else
            echo "‚ùå [Patcha] Could not apply fix: $reason"
            exit $exitCode
          fi
        else
          echo "‚ö†Ô∏è [Patcha] High severity error - manual intervention recommended"
          exit $exitCode
        fi
      fi
      echo "$response" | jq -r '.stdout'

  test:
    description: "Run Jest tests"
    run: |
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npm test" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stderr=$(echo "$response" | jq -r '.stderr')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø test failed (exit code $exitCode)"
        echo "$stderr"
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"test", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        category=$(echo "$cacaResponse" | jq -r '.category')
        severity=$(echo "$cacaResponse" | jq -r '.severity')
        echo "‚Üí [Caca] Suggestion: $suggestion ($category/$severity)"
        
        # Try Patcha auto-fix if severity is not high
        if [ "$severity" != "high" ]; then
          echo "üîß [Patcha] Attempting auto-fix..."
          patchaResponse=$(pulser invoke --agent Patcha --function executeFix \
            --args '{ "suggestion":"'"$suggestion"'", "category":"'"$category"'", "severity":"'"$severity"'", "taskName":"test", "context":"'"$stderr"'" }')
          
          executed=$(echo "$patchaResponse" | jq -r '.executed')
          needsManual=$(echo "$patchaResponse" | jq -r '.needsManualIntervention')
          reason=$(echo "$patchaResponse" | jq -r '.reason')
          
          if [ "$executed" = "true" ]; then
            echo "‚úÖ [Patcha] Fix applied: $reason"
            echo "üîÑ Retrying test..."
            
            # Retry the original command
            retryResponse=$(pulser invoke --agent BasherExec --function run \
              --args '{ "cmd": "npm test" }')
            retryExitCode=$(echo "$retryResponse" | jq -r '.exitCode')
            
            if [ "$retryExitCode" -eq 0 ]; then
              echo "‚úÖ test succeeded after auto-fix!"
              echo "$retryResponse" | jq -r '.stdout'
              exit 0
            else
              echo "‚ùå test still failing after auto-fix"
              exit $retryExitCode
            fi
          elif [ "$needsManual" = "true" ]; then
            echo "‚ö†Ô∏è [Patcha] Manual intervention required: $reason"
            exit $exitCode
          else
            echo "‚ùå [Patcha] Could not apply fix: $reason"
            exit $exitCode
          fi
        else
          echo "‚ö†Ô∏è [Patcha] High severity error - manual intervention recommended"
          exit $exitCode
        fi
      fi
      echo "$response" | jq -r '.stdout'

  deploy:
    description: "Deploy to Vercel"
    run: |
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "vercel --prod --confirm" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stderr=$(echo "$response" | jq -r '.stderr')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø deploy failed (exit code $exitCode)"
        echo "$stderr"
        suggestion=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"deploy", "stderr":"'"$stderr"'" }' | jq -r '.suggestion')
        echo "‚Üí Suggestion: $suggestion"
        exit $exitCode
      fi
      echo "$response" | jq -r '.stdout'

  plan:
    description: "Generate AI plan for a feature."
    run: |
      result=$(pulser invoke --agent MayaPlan --function planFeature \
        --args '{ "feature":"{{inputFeature}}", "repoPath":"." }')
      echo "$result" | jq .

  post-plan:
    description: "Post AI plan to GitHub PR."
    run: |
      # Expect two inputs: prNumber and the JSON plan from MayaPlan
      pr={{inputPRNumber}}
      planJson='{{inputPlanJson}}'
      response=$(pulser invoke --agent Claudia --function postPlan \
        --args '{ "prNumber":'"$pr"', "planTasks":'"$planJson"' }')
      echo "$response" | jq -r '.commentUrl'

  backend-qa:
    description: "Run comprehensive backend QA tests"
    run: |
      echo "üîç Starting Backend QA Suite..."
      
      # Check environment variables
      if [ -z "$SUPABASE_DB_URL" ]; then
        echo "‚ö†Ô∏è Warning: SUPABASE_DB_URL not set"
      fi
      
      # Run database connection test
      echo "üìä Testing database connection..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "node scripts/test-supabase-connection-simple.js" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚ùå Database connection test failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"backend-qa-db", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        category=$(echo "$cacaResponse" | jq -r '.category')
        
        echo "‚Üí [Caca] $suggestion"
        
        # Auto-reference SOP for environment issues
        if [ "$category" = "environment" ]; then
          echo ""
          echo "üîß [Auto-SOP] Environment issue detected - running automated fix guide..."
          response=$(pulser invoke --agent BasherExec --function run \
            --args '{ "cmd": "./scripts/auto-fix-environment.sh --detect-env-issue \"'"$stderr"'\"" }')
          autoFixOutput=$(echo "$response" | jq -r '.stdout')
          echo "$autoFixOutput"
          echo ""
          echo "üìã SOP Reference: sop/environment-credentials-fix.md"
        fi
      else
        echo "‚úÖ Database connection test passed"
      fi
      
      # Run SQL function tests
      echo "üîß Testing SQL functions..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "node scripts/test-sql-functions.js" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚ùå SQL function tests failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"backend-qa-sql", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        echo "‚Üí [Caca] $(echo "$cacaResponse" | jq -r '.suggestion')"
      else
        echo "‚úÖ SQL function tests passed"
      fi
      
      # Run backend unit tests
      echo "üß™ Running backend unit tests..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npm run test:unit" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚ùå Backend unit tests failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"backend-qa-unit", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        echo "‚Üí [Caca] $(echo "$cacaResponse" | jq -r '.suggestion')"
      else
        echo "‚úÖ Backend unit tests passed"
      fi
      
      # Run integration tests
      echo "üîó Running integration tests..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npm run test:integration" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚ùå Integration tests failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"backend-qa-integration", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        echo "‚Üí [Caca] $(echo "$cacaResponse" | jq -r '.suggestion')"
      else
        echo "‚úÖ Integration tests passed"
      fi
      
      # Run comprehensive filter test
      echo "üîç Running comprehensive filter tests..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "node scripts/comprehensive-filter-test.js" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚ùå Filter tests failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"backend-qa-filters", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        echo "‚Üí [Caca] $(echo "$cacaResponse" | jq -r '.suggestion')"
      else
        echo "‚úÖ Filter tests passed"
      fi
      
      echo "üìä Backend QA Suite Complete!"

composite_tasks:
  ci:
    description: "build ‚Üí lint ‚Üí test"
    steps:
      - build-css
      - lint
      - test
  
  qa-backend:
    description: "Run complete backend QA suite"
    steps:
      - backend-qa
  
  qa-full:
    description: "Run full QA suite (frontend + backend + e2e + UX filters + env check)"
    steps:
      - vercel-env-check
      - lint
      - test
      - backend-qa
      - qa-filters