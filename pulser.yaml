name: retail-insights-dashboard
version: 1.0.0

environment:
  required:
    - node
    - npm
    - tailwindcss
    - vercel

agents:
  BasherExec: pulser_agents/basher_exec.yaml
  Caca: pulser_agents/caca.yaml
  MayaPlan: pulser_agents/maya_plan.yaml
  Claudia: pulser_agents/claudia.yaml
  Patcha: pulser_agents/patcha.yaml

tasks:
  build-css:
    description: "Compile Tailwind CSS"
    run: |
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npx tailwindcss -i src/index.css -o dist/output.css --minify" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stderr=$(echo "$response" | jq -r '.stderr')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø build-css failed (exit code $exitCode)"
        echo "$stderr"
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"build-css", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        category=$(echo "$cacaResponse" | jq -r '.category')
        severity=$(echo "$cacaResponse" | jq -r '.severity')
        echo "‚Üí [Caca] Suggestion: $suggestion ($category/$severity)"
        
        # Try Patcha auto-fix if severity is not high
        if [ "$severity" != "high" ]; then
          echo "üîß [Patcha] Attempting auto-fix..."
          patchaResponse=$(pulser invoke --agent Patcha --function executeFix \
            --args '{ "suggestion":"'"$suggestion"'", "category":"'"$category"'", "severity":"'"$severity"'", "taskName":"build-css", "context":"'"$stderr"'" }')
          
          executed=$(echo "$patchaResponse" | jq -r '.executed')
          needsManual=$(echo "$patchaResponse" | jq -r '.needsManualIntervention')
          reason=$(echo "$patchaResponse" | jq -r '.reason')
          
          if [ "$executed" = "true" ]; then
            echo "‚úÖ [Patcha] Fix applied: $reason"
            echo "üîÑ Retrying build-css..."
            
            # Retry the original command
            retryResponse=$(pulser invoke --agent BasherExec --function run \
              --args '{ "cmd": "npx tailwindcss -i src/index.css -o dist/output.css --minify" }')
            retryExitCode=$(echo "$retryResponse" | jq -r '.exitCode')
            
            if [ "$retryExitCode" -eq 0 ]; then
              echo "‚úÖ build-css succeeded after auto-fix!"
              echo "$retryResponse" | jq -r '.stdout'
              exit 0
            else
              echo "‚ùå build-css still failing after auto-fix"
              exit $retryExitCode
            fi
          elif [ "$needsManual" = "true" ]; then
            echo "‚ö†Ô∏è [Patcha] Manual intervention required: $reason"
            exit $exitCode
          else
            echo "‚ùå [Patcha] Could not apply fix: $reason"
            exit $exitCode
          fi
        else
          echo "‚ö†Ô∏è [Patcha] High severity error - manual intervention recommended"
          exit $exitCode
        fi
      fi
      echo "$response" | jq -r '.stdout'

  lint:
    description: "Run ESLint"
    run: |
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npx eslint \"src/**/*.{js,jsx,ts,tsx}\"" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stderr=$(echo "$response" | jq -r '.stderr')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø lint failed (exit code $exitCode)"
        echo "$stderr"
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"lint", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        category=$(echo "$cacaResponse" | jq -r '.category')
        severity=$(echo "$cacaResponse" | jq -r '.severity')
        echo "‚Üí [Caca] Suggestion: $suggestion ($category/$severity)"
        
        # Try Patcha auto-fix if severity is not high
        if [ "$severity" != "high" ]; then
          echo "üîß [Patcha] Attempting auto-fix..."
          patchaResponse=$(pulser invoke --agent Patcha --function executeFix \
            --args '{ "suggestion":"'"$suggestion"'", "category":"'"$category"'", "severity":"'"$severity"'", "taskName":"lint", "context":"'"$stderr"'" }')
          
          executed=$(echo "$patchaResponse" | jq -r '.executed')
          needsManual=$(echo "$patchaResponse" | jq -r '.needsManualIntervention')
          reason=$(echo "$patchaResponse" | jq -r '.reason')
          
          if [ "$executed" = "true" ]; then
            echo "‚úÖ [Patcha] Fix applied: $reason"
            echo "üîÑ Retrying lint..."
            
            # Retry the original command
            retryResponse=$(pulser invoke --agent BasherExec --function run \
              --args '{ "cmd": "npx eslint \"src/**/*.{js,jsx,ts,tsx}\"" }')
            retryExitCode=$(echo "$retryResponse" | jq -r '.exitCode')
            
            if [ "$retryExitCode" -eq 0 ]; then
              echo "‚úÖ lint succeeded after auto-fix!"
              echo "$retryResponse" | jq -r '.stdout'
              exit 0
            else
              echo "‚ùå lint still failing after auto-fix"
              exit $retryExitCode
            fi
          elif [ "$needsManual" = "true" ]; then
            echo "‚ö†Ô∏è [Patcha] Manual intervention required: $reason"
            exit $exitCode
          else
            echo "‚ùå [Patcha] Could not apply fix: $reason"
            exit $exitCode
          fi
        else
          echo "‚ö†Ô∏è [Patcha] High severity error - manual intervention recommended"
          exit $exitCode
        fi
      fi
      echo "$response" | jq -r '.stdout'

  test:
    description: "Run Jest tests"
    run: |
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npm test" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stderr=$(echo "$response" | jq -r '.stderr')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø test failed (exit code $exitCode)"
        echo "$stderr"
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"test", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        suggestion=$(echo "$cacaResponse" | jq -r '.suggestion')
        category=$(echo "$cacaResponse" | jq -r '.category')
        severity=$(echo "$cacaResponse" | jq -r '.severity')
        echo "‚Üí [Caca] Suggestion: $suggestion ($category/$severity)"
        
        # Try Patcha auto-fix if severity is not high
        if [ "$severity" != "high" ]; then
          echo "üîß [Patcha] Attempting auto-fix..."
          patchaResponse=$(pulser invoke --agent Patcha --function executeFix \
            --args '{ "suggestion":"'"$suggestion"'", "category":"'"$category"'", "severity":"'"$severity"'", "taskName":"test", "context":"'"$stderr"'" }')
          
          executed=$(echo "$patchaResponse" | jq -r '.executed')
          needsManual=$(echo "$patchaResponse" | jq -r '.needsManualIntervention')
          reason=$(echo "$patchaResponse" | jq -r '.reason')
          
          if [ "$executed" = "true" ]; then
            echo "‚úÖ [Patcha] Fix applied: $reason"
            echo "üîÑ Retrying test..."
            
            # Retry the original command
            retryResponse=$(pulser invoke --agent BasherExec --function run \
              --args '{ "cmd": "npm test" }')
            retryExitCode=$(echo "$retryResponse" | jq -r '.exitCode')
            
            if [ "$retryExitCode" -eq 0 ]; then
              echo "‚úÖ test succeeded after auto-fix!"
              echo "$retryResponse" | jq -r '.stdout'
              exit 0
            else
              echo "‚ùå test still failing after auto-fix"
              exit $retryExitCode
            fi
          elif [ "$needsManual" = "true" ]; then
            echo "‚ö†Ô∏è [Patcha] Manual intervention required: $reason"
            exit $exitCode
          else
            echo "‚ùå [Patcha] Could not apply fix: $reason"
            exit $exitCode
          fi
        else
          echo "‚ö†Ô∏è [Patcha] High severity error - manual intervention recommended"
          exit $exitCode
        fi
      fi
      echo "$response" | jq -r '.stdout'

  deploy:
    description: "Deploy to Vercel"
    run: |
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "vercel --prod --confirm" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      stderr=$(echo "$response" | jq -r '.stderr')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚®Ø deploy failed (exit code $exitCode)"
        echo "$stderr"
        suggestion=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"deploy", "stderr":"'"$stderr"'" }' | jq -r '.suggestion')
        echo "‚Üí Suggestion: $suggestion"
        exit $exitCode
      fi
      echo "$response" | jq -r '.stdout'

  plan:
    description: "Generate AI plan for a feature."
    run: |
      result=$(pulser invoke --agent MayaPlan --function planFeature \
        --args '{ "feature":"{{inputFeature}}", "repoPath":"." }')
      echo "$result" | jq .

  post-plan:
    description: "Post AI plan to GitHub PR."
    run: |
      # Expect two inputs: prNumber and the JSON plan from MayaPlan
      pr={{inputPRNumber}}
      planJson='{{inputPlanJson}}'
      response=$(pulser invoke --agent Claudia --function postPlan \
        --args '{ "prNumber":'"$pr"', "planTasks":'"$planJson"' }')
      echo "$response" | jq -r '.commentUrl'

  backend-qa:
    description: "Run comprehensive backend QA tests"
    run: |
      echo "üîç Starting Backend QA Suite..."
      
      # Check environment variables
      if [ -z "$SUPABASE_DB_URL" ]; then
        echo "‚ö†Ô∏è Warning: SUPABASE_DB_URL not set"
      fi
      
      # Run database connection test
      echo "üìä Testing database connection..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "node scripts/test-supabase-connection-simple.js" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚ùå Database connection test failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"backend-qa-db", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        echo "‚Üí [Caca] $(echo "$cacaResponse" | jq -r '.suggestion')"
      else
        echo "‚úÖ Database connection test passed"
      fi
      
      # Run SQL function tests
      echo "üîß Testing SQL functions..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "node scripts/test-sql-functions.js" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚ùå SQL function tests failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"backend-qa-sql", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        echo "‚Üí [Caca] $(echo "$cacaResponse" | jq -r '.suggestion')"
      else
        echo "‚úÖ SQL function tests passed"
      fi
      
      # Run backend unit tests
      echo "üß™ Running backend unit tests..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npm run test:unit" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚ùå Backend unit tests failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"backend-qa-unit", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        echo "‚Üí [Caca] $(echo "$cacaResponse" | jq -r '.suggestion')"
      else
        echo "‚úÖ Backend unit tests passed"
      fi
      
      # Run integration tests
      echo "üîó Running integration tests..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "npm run test:integration" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚ùå Integration tests failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"backend-qa-integration", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        echo "‚Üí [Caca] $(echo "$cacaResponse" | jq -r '.suggestion')"
      else
        echo "‚úÖ Integration tests passed"
      fi
      
      # Run comprehensive filter test
      echo "üîç Running comprehensive filter tests..."
      response=$(pulser invoke --agent BasherExec --function run \
        --args '{ "cmd": "node scripts/comprehensive-filter-test.js" }')
      exitCode=$(echo "$response" | jq -r '.exitCode')
      if [ "$exitCode" -ne 0 ]; then
        echo "‚ùå Filter tests failed"
        stderr=$(echo "$response" | jq -r '.stderr')
        cacaResponse=$(pulser invoke --agent Caca --function suggest \
          --args '{ "taskName":"backend-qa-filters", "stderr":"'"$stderr"'", "exitCode":'$exitCode' }')
        echo "‚Üí [Caca] $(echo "$cacaResponse" | jq -r '.suggestion')"
      else
        echo "‚úÖ Filter tests passed"
      fi
      
      echo "üìä Backend QA Suite Complete!"

composite_tasks:
  ci:
    description: "build ‚Üí lint ‚Üí test"
    steps:
      - build-css
      - lint
      - test
  
  qa-backend:
    description: "Run complete backend QA suite"
    steps:
      - backend-qa
  
  qa-full:
    description: "Run full QA suite (frontend + backend + e2e)"
    steps:
      - lint
      - test
      - backend-qa