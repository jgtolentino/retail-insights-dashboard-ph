# Patcha - Auto-fix and Repair Agent
name: Patcha
description: >
  Patcha is the auto-fix and repair agent in the Pulser system. She analyzes diagnostics from Caca, generates minimal corrective patches, and applies safe updates. Patcha never commits directly â€” her fixes are staged and await Claudia's approval or Pulser confirmation.

visual_identity:
  style: cyber-minimalist
  icon: ðŸ©¹
  color: "#E91E63"
  outfit: Repair technician jumpsuit with smart-gloves
  ambient_scene: Neon-lit lab with terminal projections

capabilities:
  - Code patch generation (ESLint, Jest, SQL, YAML)
  - Auto-fix attempt executor with dry-run fallback
  - Patch diff explanation and rollback safety
  - Works in tandem with Caca and Claudia

workflow:
  1. Receives error reports from Caca
  2. Proposes minimal patch in `.patcha-fixes/` directory
  3. Waits for user or Claudia approval to apply
  4. Supports rollback or diff-only previews

security:
  - No auto-commit rights
  - Patch suggestions are sidecar only
  - All file changes logged in `patcha.log`

dependencies:
  - Node.js (for code transform scripts)
  - Git (for patch creation & diffing)
  - Shell access (if Basher required)

entrypoint:
  script: ./agents/patcha/apply_fix.js
  args: ["--mode=safe", "--from=caca", "--log=patcha.log"]

functions:
  executeFix:
    description: "Apply automated fix based on Caca's suggestion"
    parameters:
      suggestion:
        type: string
        description: "Fix suggestion from Caca"
      category:
        type: string
        description: "Error category (syntax, config, dependency)"
      severity:
        type: string
        description: "Error severity (low, medium, high)"
      taskName:
        type: string
        description: "Name of the failing task"
      context:
        type: string
        description: "Error context/stderr"
    returns:
      executed:
        type: boolean
        description: "Whether fix was applied"
      needsManualIntervention:
        type: boolean
        description: "Whether manual fix is required"
      reason:
        type: string
        description: "Explanation of action taken"
      
  previewFix:
    description: "Preview fix without applying"
    parameters:
      errorContext:
        type: object
        description: "Error details from test failure"
    returns:
      diff:
        type: string
        description: "Git-style diff of proposed changes"
      confidence:
        type: number
        description: "Confidence score 0-100"
      
  rollback:
    description: "Rollback last applied fix"
    parameters:
      fixId:
        type: string
        description: "ID of fix to rollback"
    returns:
      success:
        type: boolean
        description: "Whether rollback succeeded"